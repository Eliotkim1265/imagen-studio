"""
Django settings for media_studio_project project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url # For parsing DATABASE_URL environment variable
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# --- Core Django Settings ---

# SECURITY WARNING: keep the secret key used in production secret!
# Load from environment variable; raise error if not set in production
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY and os.getenv('DJANGO_ENV') == 'production':
    raise ImproperlyConfigured("DJANGO_SECRET_KEY must be set in a production environment.")
elif not SECRET_KEY:
    print("WARNING: DJANGO_SECRET_KEY not set, using insecure default for development.")
    SECRET_KEY = 'django-insecure-default-key-for-dev-only' # Insecure default for local dev

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is True if DJANGO_DEBUG is 'True', False otherwise. Defaults to False.
DEBUG = os.getenv('DJANGO_DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS: Load from environment variable (comma-separated string)
# For Cloud Run, this will include the .run.app URL.
ALLOWED_HOSTS_ENV = os.getenv('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',')]
elif DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*'] # Be more specific if possible even in dev
else:
    ALLOWED_HOSTS = [] # Must be set in production

# CSRF_TRUSTED_ORIGINS: Load from environment variable (comma-separated HTTPS URLs)
CSRF_TRUSTED_ORIGINS_ENV = os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS')
if CSRF_TRUSTED_ORIGINS_ENV:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_ENV.split(',')]
else:
    # For local development using Firebase Studio URL:
    CSRF_TRUSTED_ORIGINS = [
        'https://8000-firebase-mediastudioproject-1748724956249.cluster-cxy3ise3prdrmx53pigwexthgs.cloudworkstations.dev',
        'http://localhost:8000', # If you also run locally with `python manage.py runserver`
        'http://127.0.0.1:8000',
    ]
    if DEBUG:
        print(f"WARNING: DJANGO_CSRF_TRUSTED_ORIGINS not set, using defaults: {CSRF_TRUSTED_ORIGINS}")


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # For serving static files with Gunicorn in dev if needed
    'django.contrib.staticfiles',
    'studio', # Your application
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Whitenoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'media_studio_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Project-level templates if any
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'media_studio_project.wsgi.application'


# --- Database ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Uses DATABASE_URL environment variable for flexibility (e.g., Cloud SQL)
# Falls back to SQLite for local development if DATABASE_URL is not set.
DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}',
        conn_max_age=600, # Recommended for serverless environments
        conn_health_checks=True, # Recommended for serverless environments
    )
}


# --- Password validation ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # For 'collectstatic'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # For finding app's static files during development

# Whitenoise storage for serving static files efficiently in production
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# --- Media files (User-uploaded content, generated images by app initially) ---
# These are typically served from a dedicated media server or GCS in production.
# For Cloud Run, if generated images are temporarily stored locally by the app instance
# before being sent to GCS, this MEDIA_ROOT might be used, but instances are ephemeral.
# The primary storage for generated media is GCS as per our services.py.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Local path for temporary media or dev uploads


# --- Google Cloud Settings ---
# Loaded from environment variables for security and flexibility.
# The bash script will help the buyer set these up in their environment.
GOOGLE_PROJECT_ID = os.getenv("GOOGLE_PROJECT_ID", "sandbox-460914") # Fallback for local dev if not set
GOOGLE_LOCATION = os.getenv("GOOGLE_LOCATION", "us-central1")     # Fallback for local dev if not set

# GOOGLE_API_KEY is for Imagen 3 via google-genai if ADC isn't used/sufficient for it.
# For Vertex AI services like Veo 2, ADC (via service account on Cloud Run) is preferred.
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY") # No fallback, should be explicitly set if needed
if GOOGLE_PROJECT_ID == "sandbox-460914" and not DEBUG: # Example check
    print("WARNING: Using default GOOGLE_PROJECT_ID in a non-DEBUG environment.")
if not GOOGLE_API_KEY and DEBUG: # Only warn in DEBUG if thinking of using API key auth
    print("INFO: GOOGLE_API_KEY environment variable is not set. Assuming ADC for Vertex AI services where possible.")


# Google Cloud Storage Settings
GCS_BUCKET_NAME = os.getenv("GCS_BUCKET_NAME") # No fallback, must be set in environment
if not GCS_BUCKET_NAME and os.getenv('DJANGO_ENV') == 'production':
    raise ImproperlyConfigured("GCS_BUCKET_NAME must be set in a production environment.")
elif not GCS_BUCKET_NAME:
    print("WARNING: GCS_BUCKET_NAME not set. GCS features will fail. Using placeholder 'your-gcs-bucket-name-here'.")
    GCS_BUCKET_NAME = "your-gcs-bucket-name-here" # Placeholder to prevent immediate crash

GCS_OBJECT_PATH_PREFIX = os.getenv("GCS_OBJECT_PATH_PREFIX", "media_studio_uploads/")
GCS_GENERATED_IMAGES_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}generated_images/"
GCS_EDITED_IMAGES_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}edited_images/"
GCS_VIDEO_OUTPUTS_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}video_outputs/"
GCS_TEMP_INPUTS_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}temp_inputs/"

# Imagen 3 Settings
IMAGEN_ADD_WATERMARK = os.getenv('IMAGEN_ADD_WATERMARK', 'False').lower() == 'true' # Default to False


# Veo 2 Model Settings
VEO_MODEL_ID = os.getenv("VEO_MODEL_ID", "veo-2.0-generate-001")
_VEO_API_LOCATION = GOOGLE_LOCATION # Use the general GOOGLE_LOCATION for consistency
VEO_API_ENDPOINT = f"{_VEO_API_LOCATION}-aiplatform.googleapis.com"
VEO_FULL_ENDPOINT_URL_LRO = f"https://{VEO_API_ENDPOINT}/v1/projects/{GOOGLE_PROJECT_ID}/locations/{_VEO_API_LOCATION}/publishers/google/models/{VEO_MODEL_ID}:predictLongRunning"
VEO_OPERATION_STATE_ENDPOINT_URL_BASE = f"https://{VEO_API_ENDPOINT}/v1/"


# --- Django Security Settings for Production (Good defaults) ---
if os.getenv('DJANGO_ENV') == 'production':
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # SECURE_HSTS_SECONDS = 31536000 # 1 year; enable after confirming HTTPS works perfectly
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True
    # SECURE_SSL_REDIRECT = True # Ensure your load balancer/Cloud Run handles termination
    # X_FRAME_OPTIONS = 'DENY' # Already default


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Logging Configuration (Optional but recommended for production) ---
# Example:
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'INFO', # Change to WARNING in production if too verbose
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
#             'propagate': False,
#         },
#     },
# }

# --- Session Settings ---
# Using cookie-based sessions by default, which is fine for Cloud Run.
# SESSION_ENGINE = 'django.contrib.sessions.backends.db' # If you prefer DB-backed sessions