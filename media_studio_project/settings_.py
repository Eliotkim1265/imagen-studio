"""
Django settings for media_studio_project project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4tx*t%n+w(-zktmv$4lhs-a*^^l9m$e2(othd=z)p3gr!uynhe'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['8000-cs-815799cd-17fa-4dc9-8697-a6b56bb4b5ff.cs-us-west1-ijlt.cloudshell.dev','http://127.0.0.1:8001', '*', '8001-cs-815799cd-17fa-4dc9-8697-a6b56bb4b5ff.cs-us-west1-ijlt.cloudshell.dev ']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'studio'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'media_studio_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'media_studio_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# settings.py

import os

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST":     os.environ["DB_HOST"],
        "PORT":     os.environ.get("DB_PORT", ""),
        "USER":     os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASS"],
        "NAME":     os.environ["DB_NAME"],
    }
}




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Imagen 3 Settings
IMAGEN_ADD_WATERMARK = os.getenv('IMAGEN_ADD_WATERMARK', 'False').lower() == 'true' # Default to False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Project-level static files

# Media files (User-uploaded content, generated images)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Google Cloud Settings (using your provided credentials logic)
GOOGLE_PROJECT_ID = os.getenv("PROJECT_ID", "sandbox-460914")
GOOGLE_LOCATION = os.getenv("LOCATION", "us-central1")

if not os.getenv("GOOGLE_API_KEY"):
    print("WARNING: GOOGLE_API_KEY environment variable is not set.")
    # You might want to raise an ImproperlyConfigured error here
    # from django.core.exceptions import ImproperlyConfigured
    # raise ImproperlyConfigured("GOOGLE_API_KEY environment variable must be set.")

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Ensure this line exists for CSRF protection if not already there
# CSRF_COOKIE_SECURE = True # Uncomment for HTTPS
# SESSION_COOKIE_SECURE = True # Uncomment for HTTPS


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add your Firebase Cloud Workstations URL here
CSRF_TRUSTED_ORIGINS = [
    'https://8000-cs-815799cd-17fa-4dc9-8697-a6b56bb4b5ff.cs-us-west1-ijlt.cloudshell.dev', 
    'https://8001-cs-815799cd-17fa-4dc9-8697-a6b56bb4b5ff.cs-us-west1-ijlt.cloudshell.dev',
    'https://127.0.0.1:8001',
    'https://*',
    # You can add other trusted origins if needed, e.g., http://localhost:8000 for local testing
    # 'http://localhost:8000',
    # 'http://127.0.0.1:8000',
]

# media_studio_project/settings.py
# ... other settings ...

# Google Cloud Storage Settings
GCS_BUCKET_NAME = os.getenv("GCS_BUCKET_NAME", "my-imgstudio-bucket") # Replace or set via env var
if not GCS_BUCKET_NAME or GCS_BUCKET_NAME == "my-imgstudio-bucket":
    print("WARNING: GCS_BUCKET_NAME is not set or is using the default placeholder.")
    # For a real application, you might want to raise ImproperlyConfigured
    # from django.core.exceptions import ImproperlyConfigured
    # raise ImproperlyConfigured("GCS_BUCKET_NAME must be set in settings.py or environment variables.")

# Define a default path prefix within the bucket for this app's images
GCS_OBJECT_PATH_PREFIX = "media_studio_uploads/"
# Sub-prefixes for organization
GCS_GENERATED_IMAGES_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}generated_images/"
GCS_EDITED_IMAGES_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}edited_images/"
GCS_VIDEO_OUTPUTS_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}video_outputs/"
GCS_TEMP_INPUTS_PREFIX = f"{GCS_OBJECT_PATH_PREFIX}temp_inputs/" # For temporary uploads like Veo inputs or edit originals
# Veo 2 Model Settings (from your request.json and curl command)
VEO_MODEL_ID = "veo-2.0-generate-001"
VEO_API_ENDPOINT = f"{GOOGLE_LOCATION}-aiplatform.googleapis.com"
VEO_FULL_ENDPOINT_URL_LRO = f"https://{VEO_API_ENDPOINT}/v1/projects/{GOOGLE_PROJECT_ID}/locations/{GOOGLE_LOCATION}/publishers/google/models/{VEO_MODEL_ID}:predictLongRunning"
VEO_OPERATION_STATE_ENDPOINT_URL_BASE = f"https://{VEO_API_ENDPOINT}/v1/" # operation name will be appended

GCE_SERVICE_ACCOUNT_EMAIL = "media-studio-run-sa@sandbox-460914.iam.gserviceaccount.com"